'use client';

import Image from 'next/image';
import Link from 'next/link';
import { Pet } from '@/types/pet';
import { deletePet } from '@/services/pets';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

interface PetCardProps {
  pet: Pet;
}

export function PetCard({ pet }: PetCardProps) {
  const router = useRouter();
  const [isDeleting, setIsDeleting] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);

  const handleDelete = async (e: React.MouseEvent) => {
    e.preventDefault();
    
    if (!showConfirmation) {
      setShowConfirmation(true);
      return;
    }

    try {
      setIsDeleting(true);
      await deletePet(pet.id);
      router.refresh();
    } catch (error) {
      console.error('Error deleting pet:', error);
      alert('Erro ao excluir o animal. Por favor, tente novamente.');
    } finally {
      setIsDeleting(false);
      setShowConfirmation(false);
    }
  };

  const handleCancel = (e: React.MouseEvent) => {
    e.preventDefault();
    setShowConfirmation(false);
  };

  return (
    <Link href={`/pets/${pet.id}`}>
      <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow cursor-pointer relative group">
        <div className="relative h-48">
          <Image
            src={pet.images[0]}
            alt={`Foto de ${pet.name}`}
            fill
            className="object-cover"
          />
          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-2">
            {showConfirmation ? (
              <>
                <button
                  onClick={handleDelete}
                  disabled={isDeleting}
                  className="p-2 rounded-full bg-red-500 text-white hover:bg-red-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isDeleting ? '🗑️...' : 'Confirmar'}
                </button>
                <button
                  onClick={handleCancel}
                  className="p-2 rounded-full bg-gray-500 text-white hover:bg-gray-600"
                >
                  ❌
                </button>
              </>
            ) : (
              <button
                onClick={handleDelete}
                className="p-2 rounded-full bg-white text-gray-600 hover:bg-red-500 hover:text-white shadow-md"
              >
                🗑️
              </button>
            )}
          </div>
        </div>
        <div className="p-4">
          <h2 className="text-xl font-semibold mb-2">{pet.name}</h2>
          <div className="space-y-2">
            <p className="text-gray-600">
              {pet.species === 'dog' ? '🐕' : '🐱'} {pet.breed || (pet.species === 'dog' ? 'Cachorro' : 'Gato')}
            </p>
            <p className="text-gray-600">
              ⏳ {pet.approximateAge}
            </p>
            <p className="text-gray-600">
              📍 {pet.location}
            </p>
          </div>
          <div className="mt-4 flex flex-wrap gap-2">
            {pet.temperament?.slice(0, 2).map((temp) => (
              <span
                key={temp}
                className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full"
              >
                {temp}
              </span>
            ))}
          </div>
        </div>
      </div>
    </Link>
  );
}